/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package xyzATM;

import processing.core.PApplet;
import processing.core.PImage;
import processing.event.KeyEvent;
import processing.core.PFont;

public class App extends PApplet {
    /**
     * Specifies window width
     */
    public static final int WIDTH = 800;

    /**
     * Specifies window height
     */
    public static final int HEIGHT = 1000;

    /**
     * Text font used for the application
     */
    public PFont font;

    /**
     * The ATM
     */
    public String atmConfig = "src/main/resources/AtmBalance.csv";
    public String cardConfig = "src/main/resources/CardsInSys.csv";
    public Atm atm = new Atm();

    /**
     * Stores user input
     */
    public String userInput = "";
    public float inputAmount = 0;
    public int[] numRequested = new int[11];

    /**
     * Array of numeric inputs
     */
    public char numArr[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.'};

    public boolean toReset = false;

    public int resetCountDown;

    public App() {
    }

    /**
     * Inital environment properities and load medias
     */
    public void setup() {
        frameRate(60);
        this.font = this.createFont("src/main/resources/PressStart2P-Regular.ttf", 16);
        atm.fetch(atmConfig, cardConfig);
    }

    /**
     * Define the settings, for defining application window size for this application
     */
    public void settings() {
        size(WIDTH, HEIGHT);
    }


    /**
     * For display
     */
    public void draw() {
        background(0, 0, 0);
        textFont(font, 16);
        textAlign(LEFT);
        text("Press [Enter] to CONFIRM\nPress [z] to CLEAR\nPress [c] to CANCEL\n", 250, HEIGHT - 100);
        textAlign(CENTER);
        textFont(font, 30);
        atm.tick(this);
        // initial display
        if(this.atm.display == Display.INITAL) {
            text("XYZ Banking", WIDTH/2, HEIGHT/3);
            textFont(font, 20);
            text("SELECT\n\nCustomer [1]\nAdminstrator [2]\n\n AND PRESS ENTER", WIDTH/2, HEIGHT/2);
            text(userInput, WIDTH/2, HEIGHT-150);
            textFont(font, 16);
        }
        // admin adding fund
        else if(this.atm.display == Display.ADMIN) {
            textFont(font, 20);
            text("Adding Balance\nto this ATM...", WIDTH/2, 100);
            text("Current balance:\n" + String.format("%.02f", atm.balance), WIDTH/2, 200);
            textAlign(LEFT);
            text("$100 [q]   x" + atm.numOfEachValue[0] + "  +" + numRequested[0], 200, HEIGHT/3);
            text("$50  [w]   x" + atm.numOfEachValue[1] + "  +" + numRequested[1], 200, HEIGHT/3+30);
            text("$20  [e]   x" + atm.numOfEachValue[2] + "  +" + numRequested[2], 200, HEIGHT/3+60);
            text("$10  [r]   x" + atm.numOfEachValue[3] + "  +" + numRequested[3], 200, HEIGHT/3+90);
            text("$5   [t]   x" + atm.numOfEachValue[4] + "  +" + numRequested[4], 200, HEIGHT/3+120);
            text("$2   [a]   x" + atm.numOfEachValue[5] + "  +" + numRequested[5], 200, HEIGHT/3+150);
            text("$1   [s]   x" + atm.numOfEachValue[6] + "  +" + numRequested[6], 200, HEIGHT/3+180);
            text("50c  [d]   x" + atm.numOfEachValue[7] + "  +" + numRequested[7], 200, HEIGHT/3+210);
            text("20c  [f]   x" + atm.numOfEachValue[8] + "  +" + numRequested[8], 200, HEIGHT/3+240);
            text("10c  [g]   x" + atm.numOfEachValue[9] + "  +" + numRequested[9], 200, HEIGHT/3+270);
            text("5c   [h]   x" + atm.numOfEachValue[10] + "  +" + numRequested[10], 200, HEIGHT/3+300);
            textAlign(CENTER);
            text("Adding balance:\n" + String.format("%.02f", inputAmount), WIDTH/2, HEIGHT/2+300);
        }
        // card number entering display
        else if(this.atm.display == Display.CARDNUM) {
            text("ENTER YOUR\n CARD NUMBER\n AND PRESS ENTER", WIDTH/2, HEIGHT/3);
            text(userInput, WIDTH/2, HEIGHT/2);
        }
        // card not exist
        else if(this.atm.display == Display.NOTEXIST) {
            text("Sorry\n this card \ndoes NOT EXIST", WIDTH/2, HEIGHT/3);
        }
        // card invalid (date or status issue)
        else if(this.atm.display == Display.INVALID) {
            text("Sorry\n this card \nis INVALID", WIDTH/2, HEIGHT/3);
        }
        // enter pin
        else if(this.atm.display == Display.PIN) {
            text("ENTER YOUR\n PIN NUMBER\n AND PRESS ENTER", WIDTH/2, HEIGHT/3-100);
            text(userInput, WIDTH/2, HEIGHT/2+100);
            if(this.atm.badInput) {
                text("Incorrect Pin\n Please try again:", WIDTH/2, HEIGHT/3+110);
            }
        }
        // bloced due to too many incorrect pin input
        else if(this.atm.display == Display.BLOCKED) {
            text("Sorry,\nthis card\nhas been\nBLOCKED", WIDTH/2, HEIGHT/3);
        }
        // stolen or lost card -> confiscated
        else if(this.atm.display == Display.CONFISCATED) {
            text("Sorry,\nthis card\nhas been\nCONFISCATED\n\nPlease contact\nour Customer Service\non 000", WIDTH/2, HEIGHT/3);
        }
        // Selection type of transcation
        else if(this.atm.display == Display.SELECTION) {
            text("Please Select:\n\nWithdraw[1]\n\nDeposit[2]\n\nBalance Check[3]", WIDTH/2, HEIGHT/3);
            text(userInput, WIDTH/2, HEIGHT/2+150);
        }
        // Balance
        else if(this.atm.display == Display.BALANCE) {
            text("Your Balance:", WIDTH/2, HEIGHT/3);
            text(String.format("%.02f", atm.insertedCard.balance), WIDTH/2, HEIGHT/3+100);
        }
        // Deposit
        else if(this.atm.display == Display.DEPOSIT) {
            text("Please insert your notes\nand press ENTER", WIDTH/2, 200);
            textFont(font, 25);
            textAlign(LEFT);
            text("$100 [q]    +" + numRequested[0], 200, HEIGHT/3+100);
            text("$50  [w]    +" + numRequested[1], 200, HEIGHT/3+130);
            text("$20  [e]    +" + numRequested[2], 200, HEIGHT/3+160);
            text("$10  [r]    +" + numRequested[3], 200, HEIGHT/3+190);
            text("$5   [t]    +" + numRequested[4], 200, HEIGHT/3+220);
            textAlign(CENTER);
            text("Deposit amount:\n" + String.format("%.02f", inputAmount), WIDTH/2, HEIGHT/2+200);
        }
        // WITHDRAW
        else if(this.atm.display == Display.WITHDRAW) {
            textFont(font, 25);
            text("Please select amount\nand press ENTER", WIDTH/2, 100);
            textAlign(LEFT);
            text("$100 [q]    +" + numRequested[0], 200, HEIGHT/3);
            text("$50  [w]    +" + numRequested[1], 200, HEIGHT/3+30);
            text("$20  [e]    +" + numRequested[2], 200, HEIGHT/3+60);
            text("$10  [r]    +" + numRequested[3], 200, HEIGHT/3+90);
            text("$5   [t]    +" + numRequested[4], 200, HEIGHT/3+120);
            text("$2   [a]    +" + numRequested[5], 200, HEIGHT/3+150);
            text("$1   [s]    +" + numRequested[6], 200, HEIGHT/3+180);
            text("50c  [d]    +" + numRequested[7], 200, HEIGHT/3+210);
            text("20c  [f]    +" + numRequested[8], 200, HEIGHT/3+240);
            text("10c  [g]    +" + numRequested[9], 200, HEIGHT/3+270);
            text("5c   [h]    +" + numRequested[10], 200, HEIGHT/3+300);
            textAlign(CENTER);
            text("Withdraw amount:\n" + String.format("%.02f", inputAmount), WIDTH/2, HEIGHT/2+200);
        }

        else if(atm.display == Display.NOATMFUND){
            text("Sorry, this ATM\ndoes not have\neoungh balance", WIDTH/2, HEIGHT/3);
        }
        else if(atm.display == Display.NOCARDFUND){
            text("Insufficient\ncard balance", WIDTH/2, HEIGHT/3);
        }
        else if(atm.display == Display.SUCCESS){
            text("Transaction Success", WIDTH/2, HEIGHT/2);
        }
        else if(atm.display == Display.FINISH){
            text("Service Finished\nPlease take your\nCard and Receipt", WIDTH/2, HEIGHT/2);
        }
        else if(atm.display == Display.CANCEL){
            text("Service Cancel\nPlease take your Card", WIDTH/2, HEIGHT/2);
        }
    }


    /**
     * Detect for key pressed
     */
    public void keyPressed(KeyEvent e){
        // clear key
        if(key == 'z') {
            resetInputs();
        }
        // enter key
        else if(key == '\n'){
            this.atm.savedInput = userInput;
            userInput = "";
        }
        // cancel key
        else if(key == 'c'){
            resetInputs();
            atm.display = atm.display.cancel();
        }
        // numeric keys
        else {
            for(char n : numArr) {
                if(key == n) {
                    userInput += key;
                }
            }
        }

        // key for transaction
        if(atm.display == Display.DEPOSIT || atm.display == Display.WITHDRAW || atm.display == Display.ADMIN) {
            if(atm.display != Display.DEPOSIT) {
                if(key == 'a'){
                    inputAmount += 2;
                    numRequested[5] += 1;
                }
                else if(key == 's'){
                    inputAmount += 1;
                    numRequested[6] += 1;
                }
                else if(key == 'd'){
                    inputAmount += 0.5;
                    numRequested[7] += 1;
                }
                else if(key == 'f'){
                    inputAmount += 0.2;
                    numRequested[8] += 1;
                }
                else if(key == 'g'){
                    inputAmount += 0.1;
                    numRequested[9] += 1;
                }
                else if(key == 'h'){
                    inputAmount += 0.05;
                    numRequested[10] += 1;
                }
            }
            if(key == 'q'){
                inputAmount += 100;
                numRequested[0] += 1;
            }
            else if(key == 'w'){
                inputAmount += 50;
                numRequested[1] += 1;
            }
            else if(key == 'e'){
                inputAmount += 20;
                numRequested[2] += 1;
            }
            else if(key == 'r'){
                inputAmount += 10;
                numRequested[3] += 1;
            }
            else if(key == 't'){
                inputAmount += 5;
                numRequested[4] += 1;
            }
            else if(key == '\n'){
                atm.makeTransaction(numRequested, inputAmount);
                // reset input
                int i = 0;
                while(i < numRequested.length){
                    numRequested[i] = 0;
                    i++;
                }
                inputAmount = 0;
            }

        }
    }

    /**
     * Quick reset of inputs
     */
    public void resetInputs() {
        this.atm.badInput = false;
        this.userInput = "";
        this.inputAmount = 0;
        int i = 0;
        while(i < numRequested.length){
            numRequested[i] = 0;
            i++;
        }
    }

    /**
     * Return to a display after few second
     */
    public void returnDisplay(Display d) {
        resetInputs();
        if(this.toReset == false){
            this.toReset = true;
            this.resetCountDown = this.frameCount + 150;
        } else {
            if(this.frameCount >= this.resetCountDown) {
                atm.display = d;
                toReset = false;
            }
        }
    }

    /**
     * To run the application
     */
    public static void main(String[] args) {
        PApplet.main("xyzATM.App");
    }
}
